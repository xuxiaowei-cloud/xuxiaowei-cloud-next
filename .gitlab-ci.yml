# 此流水线为 gitlab.com、jihulab.com、自建 gitlab 使用

stages:
  # 极狐GitLab 构建/测试/扫描依赖漏洞等
  - package
  # 使用 k8s（也可使用 docker、shell 等执行器，需要能使用 docker 相关命令）构建、制作 docker 镜像、推送到 docker 私服
  - k8s-package
  # 在 k8s 所在的服务器上执行项目滚动发布
  - k8s-publish
  # 使用 shell 执行器构建
  - shell-package
  # 使用 shell 执行器发布
  - shell-service
  # 使用 docker 执行器构建、制作 docker 镜像
  - docker-package
  # 使用 docker 执行器发布
  - docker-service
  # 代码同步
  - sync

# murphysec
murphysec:
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  stage: package
  # Docker 镜像开源地址：https://gitee.com/xuxiaowei-com-cn/murphysec
  image: xuxiaoweicomcn/murphysec:v3.1.1-maven-3.6.3-openjdk-17
  script:
    # murphysec 文档：https://www.murphysec.com/docs/guides/scan-scene/cli.html
    - murphysec -v
    - murphysec auth login $murphysec_token
    - murphysec scan . --log-level info --write-log-to murphysec.log --json
  # https://docs.gitlab.cn/jh/ci/yaml/index.html#cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .m2/repository
  artifacts:
    name: murphysec
    paths:
      - murphysec.log
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 main 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # PR 合并到 main 后执行、推送到 main 分支时
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    # 极狐 GitLab Runner 标签（仅在极狐GitLab共享Runner上执行）
    - jihulab

#
# coverage
coverage:
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  stage: package
  image: maven:3.6.3-openjdk-17
  services:
    - name: docker:dind
      variables:
        # 关闭 TLS
        DOCKER_TLS_CERTDIR: ""
  script:
    - echo $DOCKER_PORT
    - echo $DOCKER_PORT_2375_TCP
    - echo $DOCKER_PORT_2375_TCP_PROTO
    - echo $DOCKER_PORT_2375_TCP_PORT
    - echo $DOCKER_PORT_2375_TCP_ADDR
    - echo $DOCKER_PORT_2376_TCP
    - echo $DOCKER_PORT_2376_TCP_PROTO
    - echo $DOCKER_PORT_2376_TCP_PORT
    - echo $DOCKER_PORT_2376_TCP_ADDR
    # 自建 GitLab 实例 URL 的主机（部分域名）
    - PRIVATE_SERVER_HOST=xuxiaowei
    - if [[ $CI_SERVER_HOST =~ $PRIVATE_SERVER_HOST ]];
      then
    # 自建 GitLab 使用 Maven 私库（文档：https://gitlab-k8s.xuxiaowei.com.cn/gitlab-k8s/docs/nexus/docker-install-nexus）
    - SETTINGS_FILE_NAME=settings-private.xml;
      else
    # 非自建 GitLab 使用 阿里/腾讯 Maven 镜像
    - SETTINGS_FILE_NAME=settings.xml;
      fi
    - mvn clean -e -U package source:jar javadoc:jar install -DskipTests=true -s $SETTINGS_FILE_NAME && PACKAGE_FLAG=1;
    - if [ "$PACKAGE_FLAG" == "1" ]; then echo '打包完成'; else echo '打包失败' && xxxx; fi
    - mvn -pl admin-server -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl gateway -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl passport -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/canal -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/file -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/master-data -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/user -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/webservice -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/websocket -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/wechat-miniprogram -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/wechat-offiaccount -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl ui -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl xxl-job-admin -s $SETTINGS_FILE_NAME docker:build -Ddocker.host=$DOCKER_PORT -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - rm -rf .m2/repository/cloud/xuxiaowei
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .m2/repository
      - passport-ui/node/
      - passport-ui/node_modules/
      - ui/node/
      - ui/node_modules/
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 main 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # PR 合并到 main 后执行、推送到 main 分支时
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    # 极狐 GitLab Runner 标签（仅在极狐GitLab共享Runner上执行）
    - jihulab


# 嵌入
include:
  # 对象储存
  # 已禁用，有需要时才开放此内容
  # - /upload.yml
  # 使用 k8s 执行器 打包、部署服务
  - /k8s.yml
  # 使用 shell 执行器 打包、部署服务
  - /shell.yml
  # 使用 docker 执行器 打包、部署服务
  - /docker.yml
  # 同步代码
  - /sync.yml
